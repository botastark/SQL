/* 
    CREATED BY BOTA DUISENBAY 
    9 AUG 2020
    CLASSWORK 1
*/
--CREATING NEW DATABASE, WHERE ALL TABLES WILL BE STORED
CREATE DATABASE MY_FIRST_DB

/*
    TO SWITCH TO NEWLY CREATED DATABASE (FROM MASTER TO MY_FIRST_DB)
    ALL THE TABLES TO BE CREATED LATER ON WILL BE STORED IN THIS DB, NOT MASTER
*/
USE MY_FIRST_DB;

/*
    CREATING NEW TABLE NAMED FIRST_TABLE WITH 3 COLUMNS: 
    ID, NAMES AND BIRTH WITH TYPES INTEGER (INT), STRING (VARCHAR) AND DATE CORRESPONDINGLY 
    INT - NON FRACTIONAL NUMBER THAT COULD BE EITHER POSITIVE OR NEGATIVE, BUT OPERATE ONLY IN CERTAIN RANGE
    VARCHAR - CONTAINS CHARACTERS AND WHOSE MAX LENGTH IS REQUIRED TO BE SPECIFIED INSIDE THRE BRACKETS
    DATE - REPRESENTS DATE IN FORMAT 'YYYY.MM.DD'
*/

CREATE TABLE FIRST_TABLE(
    ID INT
    , NAMES VARCHAR(64)
    , BIRTH DATE
);


/*
    CREATING NEW TABLE NAMED PERSONS WITH 4 COLUMNS: 
    PersonID -  REQUIRED TO BE FILLED(NOT NULL) AND 
                DEFINED TO UNIQUE FOR FURTHER ACCESS TO IT THROUGH OTHER TABLES
    LastName  - CAN BE SKIPPED(DEFINED AS NULL) OR FILLED WITH STRING        
    FirstName - REQUIRED TO BE SPECIFIED (NOT NULL) WITH STRING
    Age       - CAN BE OMITTED OR INDICATED WITH INT
*/
CREATE TABLE Persons (
    PersonID int NOT NULL PRIMARY KEY
    , LastName varchar(64)
    , FirstName varchar(64) NOT NULL
    , Age int
)


/*
    CREATING NEW TABLE NAMED Orders WITH 3 COLUMNS: 
    OrderID     - REQUIRED TO BE FILLED(NOT NULL) AND 
                  DEFINED TO UNIQUE FOR FURTHER ACCESS TO IT THROUGH OTHER TABLES      
    OrderNumber - REQUIRED TO BE SPECIFIED (NOT NULL) WITH INT
    PersonID    - PRIMARY KEY COLUMN RETRIVED FROM TABLE Persons, HENCE CALLED FOREIGN KEY
*/
CREATE TABLE Orders (
    OrderID int NOT NULL PRIMARY KEY,
    OrderNumber int NOT NULL,
    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
);



/*
    CREATING NEW TABLE NAMED CUSTOMERS: 
    CLIENT_ID  - PRIMARY KEY DEFINED TO START FROM 1 AND INCREMENT WITH EACH ELEMENT BY 1
                (1, 2, 3, ...)
    OrderID    - FK LINKED TO OrderID IN TABLE Orders
*/
CREATE TABLE CUSTOMERS(
    CLIENT_ID int IDENTITY(1,1) PRIMARY KEY
    , BIRTH DATE
    , AGE int NOT NULL
    , OrderID int FOREIGN KEY REFERENCES Orders(OrderID)
);

--TO DISPLAY/SELECT DATA OF (* FOR ALL, OTHERWISE COLUMN NAMES TO BE SPECIFIED) COLUMNS FROM TABLE Persons
SELECT * FROM Persons

--ADDING NEW COLUMN GENDER OF VARCHAR(1) TYPE TO ALREADY EXISTING TABLE CUSTOMER
ALTER TABLE CUSTOMERS
ADD GENDER VARCHAR(1)

--CREATING PK FOR ALREADY EXISTING COLUMN ID IN TABLE FIRST_TABLE
ALTER TABLE FIRST_TABLE
ADD PRIMARY KEY (ID);

/*
ADDING NEW ENTRY TO FIRST_TABLE WITH VALUES SPECIFIED 
IN THE CORRESPONNDING ORDER AS COLUMN NAMES ARE WRITTEN
NOT MENTIONED COLUMNS ARE DEFINED AS NULL
*/
INSERT INTO FIRST_TABLE (ID, NAMES, BIRTH)
VALUES (1, 'ELENA', '1990.01.01')


--ADDING NEW ENTRIES TO FIRST_TABLE WITH VALUES SPECIFIED IN THE ORDER AS THE COLUMN NAMES APPEARS IN CREATING THE TABLE
INSERT INTO FIRST_TABLE
VALUES (2, 'AZIZBEK','1991.01.01'),
        (3, 'AZIZ','1994.02.03')

SELECT * FROM CUSTOMERS

INSERT INTO CUSTOMERS (BIRTH, AGE)
VALUES ('1990.01.01', 29),
    ('1996.01.01', 24),
    ('1993.01.01', 26)

/*
    UPDATE - TO CHANGE ALREADY EXISTING ENTRIES IN A TABLE
    ALL ENTRIES WITH CLIENT_ID = 2 ARE UPDATED TO HAVE SETTING BIRTH = '1990.01.01' AND AGE = 30
*/
UPDATE CUSTOMERS
SET BIRTH = '1990.01.01', AGE = 30
WHERE CLIENT_ID = 2

--ALL ENTRIES(ROWS) FROM TABLE CUSTOMERS  WHOSE CLIENT_ID IS 1, 4 OR 5 ARE SELLECTED
SELECT * FROM CUSTOMERS WHERE CLIENT_ID IN (1,4,5)

--ALL ENTRIES(ROWS) FROM TABLE CUSTOMERS  WHOSE GENDER IS 'F' ARE SELLECTED
SELECT * FROM CUSTOMERS WHERE GENDER = 'F'

--COLUMNS OF THE TABLE ARE KEPT, BUT ALL THE ENTRIES ARE NULLED
DELETE FROM FIRST_TABLE
--ALL ENTRIES OF THE TABLE WITH ID 4 OR 1 ARE DELETES
DELETE FROM FIRST_TABLE WHERE ID=4 AND ID=1
--WHOLE TABLE INCLUDING COLUMNS IS DELETED
DROP TABLE CUSTOMERS

/*
STARTING A TRANSACTION TRAN_FIRST, WHERE THE ROW WITH ID 3 IN FIRST_TABLE IS DELETED
THEN ACTIONS TAKEN IN TRANSACTION IS REVERTED BY ROLLBACK, MEANING THE ROW IS BACK
AFTER ALL THE OPERATIONS THE FINAL VERSION IS COMMITTED 
*/
BEGIN TRANSACTION TRAN_FIRST
DELETE FROM FIRST_TABLE WHERE ID =3
ROLLBACK TRAN TRAN_FIRST
COMMIT

--IN THIS CASE DELETED TABLE CAN BE REVERTED AS TRANSACTION IS FINISHED WITH COMMMIT, DISABLING ROLLBACK
BEGIN TRANSACTION TRAN_2
DROP TABLE FIRST_TABLE
COMMIT
ROLLBACK TRAN TRAN_2